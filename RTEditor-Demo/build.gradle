/*
 * Copyright (C) 2015-2016 Emanuel Moecklin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.onegravity.rteditor.demo"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 6
        versionName "1.2.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    task indexAssets {
        description 'Index Build Variant assets for faster lookup by AssetManager'

        ext.assetsSrcDir = file( "${projectDir}/src/main/assets" )

        inputs.dir assetsSrcDir

        doLast {
            android.applicationVariants.each { target ->
                // create index
                def contents = ""
                def tree = fileTree(dir: "${ext.assetsSrcDir}", include: ['**/*.ttf'], exclude: ['**/.svn/**', '*.index'])
                // use this instead if you have assets folders in each flavor:
                // def tree = fileTree(dir: "${ext.variantPath}", exclude: ['**/.svn/**', '*.index'])
                tree.visit { fileDetails ->
                    contents += "${fileDetails.relativePath}" + "\n"
                }

                // create index file
                def assetIndexFile = new File("${ext.assetsSrcDir}/assets.index")
                assetIndexFile.write contents
            }
        }
    }

    indexAssets.dependsOn {
        tasks.matching { task -> task.name.startsWith( 'merge' ) && task.name.endsWith( 'Assets' ) }
    }

    tasks.withType( JavaCompile ) {
        compileTask -> compileTask.dependsOn indexAssets
    }

    indexAssets
}

dependencies {
    // use this to compile/run locally
    compile project(':RTEditor-Toolbar')

    // or this to use the latest published library
//    compile 'com.1gravity:android-rteditor:1.4.1'
}
